import javafx.scene.image.Image;
import javafx.application.Application;
import javafx.stage.Stage;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Cursor;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import javafx.util.Duration;


public class Rocket  {
	
		private static final int EXPLOSION_STEPS = 0;
		int posX, posY, size;
		boolean exploding, destroyed;
		Image img;
		int explosionStep = 0;
		private GraphicsContext gc;
		static final int EXPLOSION_W = 128;
		static final int EXPLOSION_ROWS = 3;
		static final int EXPLOSION_COL = 3;
		static final int EXPLOSION_H = 128;
		static final int EXPLOSION_STEPS1 = 15;
		static final Image EXPLOSION_IMG = new Image("file:///C:/Users/alias/Downloads/Compressed/explosion.png");
		
		
		public Rocket(int posX, int posY, int size,  Image image) {
			this.posX = posX;
			this.posY = posY;
			this.size = size;
			img = image;
		}
		
		public Shot shoot() {
			return new Shot(posX + size / 2 - Shot.size / 2, posY - Shot.size);
		}

		public void update() {
			if(exploding) explosionStep++;
			destroyed = explosionStep > EXPLOSION_STEPS;
		}
		
		public void draw() {
			if(exploding) {
				gc.drawImage(EXPLOSION_IMG, explosionStep % EXPLOSION_COL * EXPLOSION_W, (explosionStep / EXPLOSION_ROWS) * EXPLOSION_H + 1,
						EXPLOSION_W, EXPLOSION_H,
						posX, posY, size, size);
			}
			else {
				gc.drawImage(img, posX, posY, size, size);
			}
		}
	
		public boolean colide(Rocket other) {
			int d = Gamesetup.distance(this.posX + size / 2, this.posY + size /2, 
							other.posX + other.size / 2, other.posY + other.size / 2);
			return d < other.size / 2 + this.size / 2 ;
		}
		
		
		

		public void explode() {
			exploding = true;
			explosionStep = -1;
		}

	}
